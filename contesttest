#!/bin/bash

# The MIT License (MIT)
#
# Copyright (c) 2015 Oleg Morozenkov
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

set -e

# Reset color
Color_Off='\033[0m'
# Colors
Black='\033[0;90m'
Red='\033[0;91m'
Green='\033[0;92m'
Yellow='\033[0;93m'
Blue='\033[0;94m'
Purple='\033[0;95m'
Cyan='\033[0;96m'
White='\033[0;97m'
# Bold colors
BBlack='\033[1;30m'
BRed='\033[1;31m'
BGreen='\033[1;32m'
BYellow='\033[1;33m'
BBlue='\033[1;34m'
BPurple='\033[1;35m'
BCyan='\033[1;36m'
BWhite='\033[1;37m'


# detect tests' directory
if [[ -z $3 ]]; then
  testsdir=tests
else
  testsdir=$3
fi

# detect action
if [[ $# == 0 || ($# == 1 && ($1 == "help" || $1 == "--help" || $1 == "-h" || $1 == "--h")) ]]; then
  action=help
else
  case $2 in
    test|t|"")
      action=test
      ;;
    run|r)
      action=run
      ;;
    debug|d)
      action=debug
      ;;
    *)
      echo "Can't understand action '$2'. Aborting"
      exit 2
      ;;
  esac
fi

# display help
if [[ $action == "help" ]]; then
  echo -e "$BWhite""contesttest$Color_Off by Oleg Morozenkov"
  echo    "https://github.com/reo7sp/contesttest"
  echo    "Makes running your programs made for programming contests more pleasant."
  echo
  echo -e "$BWhite""Usage:$Color_Off contesttest SCRIPTNAME [ACTION] [TESTSDIR]"
  echo
  echo -e "$BWhite""Actions:$Color_Off"
  echo    "    t, test     Compiles and runs your program and then automatically provides tests to stdin. This is the default action if no one suplied."
  echo    "    r, run      Compiles and runs your program."
  echo    "    d, debug    Compiles the program and then runs the debugger."
  echo
  echo -e "$BWhite""Test format:$Color_Off"
  echo    "    TESTSDIR/SCRIPTNAME/f.in  - it's where test's input is kept,"
  echo    "    TESTSDIR/SCRIPTNAME/f.out - it's where test's answer is kept"
  echo    "        where f can be any string."
  echo
  echo -e "$BWhite""Supported languages:$Color_Off"
  echo    "    C++, C, Python, Java."
  echo    "    If you need a language which is not listed here, write an issue or send a pull request at the github page."
  echo
  echo -e "$BWhite""Additional notes:$Color_Off"
  echo    "    If pypy is installed, contesttest will use pypy for python programs. To prohibit it set the enviroment variable NOPYPY to 1."
  exit
fi

# detect script language
langautodetected=0
case $1 in
  *.cpp)
    lang=cpp
    ;;
  *.c)
    lang=c
    ;;
  *.py)
    lang=py
    ;;
  *.java)
    lang=java
    ;;
  *)
    langautodetected=1
    langs=(cpp c py java)
    for l in "${langs[@]}"; do
      if [[ -f "$1.$l" ]]; then
        lang=$l
        break
      fi
    done
    if [[ -z $lang ]]; then
      echo "Can't understand the type of script '$1'. Aborting"
      exit 1
    fi
    ;;
esac

if [[ $langautodetected == 1 ]]; then
  script=$1
else
  script=${1%.*}
fi

case $lang in
  cpp)
    if [[ $action == "debug" ]]; then
      compilecommand="g++ -Wall -std=c++11 -g -o $script $script.cpp"
    else
      compilecommand="g++ -Wall -std=c++11 -O2 -o $script $script.cpp"
    fi
    runcommand="./$script"
    debugcommand="gdb $script"
    ;;
  c)
    if [[ $action == "debug" ]]; then
      compilecommand="gcc -Wall -g -o $script $script.c"
    else
      compilecommand="gcc -Wall -O2 -o $script $script.c"
    fi
    runcommand="./$script"
    debugcommand="gdb $script"
    ;;
  py)
    compilecommand=""
    if [[ (-z $NOPYPY || ! $NOPYPY) && $(hash pypy 2>/dev/null) ]]; then
      runcommand="pypy $script.py"
      runcommand="pypy -m pdb $script.py"
    else
      runcommand="python $script.py"
      runcommand="python -m pdb $script.py"
    fi
    ;;
  java)
    compilecommand="javac $script.java"
    runcommand="java -cp . $script"
    debugcommand="jdb $script"
    ;;
esac

# compile
if [[ ! -z $compilecommand ]]; then
  echo -e ">>>$BGreen Compiling$Color_Off"
  eval $compilecommand
  echo
fi

# run
case $action in
  run)
    echo -e ">>>$BGreen Running$Color_Off"
    eval $runcommand
    ;;
  debug)
    echo -e ">>>$BGreen Starting debugger$Color_Off"
    eval $debugcommand
    ;;
  test)
    for t in $(ls $testsdir/$script/*.in); do
      echo -n -e ">>>$BGreen Running test $(basename ${t%.in}).$Color_Off"

      eval "$( (time (cat $t | eval $runcommand)) 2> >(timeofanswer=$(cat); declare -p timeofanswer) > >(answer=$(cat); declare -p answer) )"
      timeofanswer=$(
        echo $timeofanswer |
          awk "{
            \$2 = substr(\$2, 3, 5);
            \$4 = substr(\$4, 3, 5);
            \$6 = substr(\$6, 3, 5);
            print \"real: $BYellow\" \$2 \"s$Color_Off, cpu: $BYellow\" \$4+\$6 \"s$Color_Off\"
          }"
      )

      echo -e " $timeofanswer"

      echo -e ">$Cyan Input:$Color_Off"
      cat $t
      echo

      echo -e ">$Cyan Output:$Color_Off"
      echo "$answer"
      echo

      if [[ -f ${t%.in}.out ]]; then
        echo -e ">$Cyan Expected:$Color_Off"
        cat ${t%.in}.out
        echo
      fi
    done
    ;;
esac

